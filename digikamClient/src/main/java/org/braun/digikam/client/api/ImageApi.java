/*
 * Digikam
 * RESTful Backend for Digikam
 *
 * The version of the OpenAPI document: 1.0
 * Contact: braun.h.michael@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.braun.digikam.client.api;

import com.fasterxml.jackson.core.type.TypeReference;

import org.braun.digikam.client.invoker.ApiException;
import org.braun.digikam.client.invoker.ApiClient;
import org.braun.digikam.client.invoker.Configuration;
import org.braun.digikam.client.model.*;
import org.braun.digikam.client.invoker.Pair;

import org.braun.digikam.client.model.Image;
import org.braun.digikam.client.model.ImagesInner;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-05T16:52:31.595785912+02:00[Europe/Berlin]")
public class ImageApi {


  private ApiClient apiClient;

  public ImageApi() {
    this(Configuration.getDefaultApiClient());
  }

  public ImageApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * 
   * 
   * @param keywords List of Keywords (optional
   * @param creator  (optional)
   * @param makeModel  (optional)
   * @param lens  (optional)
   * @param orientation  (optional)
   * @param dateFrom  (optional)
   * @param dateTo  (optional)
   * @param ratingFrom  (optional)
   * @param ratingTo  (optional)
   * @param isoFrom  (optional)
   * @param isoTo  (optional)
   * @param exposureTimeFrom  (optional)
   * @param exposureTimeTo  (optional)
   * @param apertureFrom  (optional)
   * @param apertureTo  (optional)
   * @param focalLengthFrom  (optional)
   * @param focalLengthTo  (optional)
   * @return List&lt;ImagesInner&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ImagesInner> findImagesByImageAttributes(List<Integer> keywords, String creator, String makeModel, String lens, String orientation, String dateFrom, String dateTo, Integer ratingFrom, Integer ratingTo, Integer isoFrom, Integer isoTo, Double exposureTimeFrom, Double exposureTimeTo, Double apertureFrom, Double apertureTo, Double focalLengthFrom, Double focalLengthTo) throws ApiException {
    return this.findImagesByImageAttributes(keywords, creator, makeModel, lens, orientation, dateFrom, dateTo, ratingFrom, ratingTo, isoFrom, isoTo, exposureTimeFrom, exposureTimeTo, apertureFrom, apertureTo, focalLengthFrom, focalLengthTo, Collections.emptyMap());
  }


  /**
   * 
   * 
   * @param keywords List of Keywords (optional
   * @param creator  (optional)
   * @param makeModel  (optional)
   * @param lens  (optional)
   * @param orientation  (optional)
   * @param dateFrom  (optional)
   * @param dateTo  (optional)
   * @param ratingFrom  (optional)
   * @param ratingTo  (optional)
   * @param isoFrom  (optional)
   * @param isoTo  (optional)
   * @param exposureTimeFrom  (optional)
   * @param exposureTimeTo  (optional)
   * @param apertureFrom  (optional)
   * @param apertureTo  (optional)
   * @param focalLengthFrom  (optional)
   * @param focalLengthTo  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;ImagesInner&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ImagesInner> findImagesByImageAttributes(List<Integer> keywords, String creator, String makeModel, String lens, String orientation, String dateFrom, String dateTo, Integer ratingFrom, Integer ratingTo, Integer isoFrom, Integer isoTo, Double exposureTimeFrom, Double exposureTimeTo, Double apertureFrom, Double apertureTo, Double focalLengthFrom, Double focalLengthTo, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/image/find";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "keywords", keywords));
    localVarQueryParams.addAll(apiClient.parameterToPair("creator", creator));
    localVarQueryParams.addAll(apiClient.parameterToPair("makeModel", makeModel));
    localVarQueryParams.addAll(apiClient.parameterToPair("lens", lens));
    localVarQueryParams.addAll(apiClient.parameterToPair("orientation", orientation));
    localVarQueryParams.addAll(apiClient.parameterToPair("date_from", dateFrom));
    localVarQueryParams.addAll(apiClient.parameterToPair("date_to", dateTo));
    localVarQueryParams.addAll(apiClient.parameterToPair("ratingFrom", ratingFrom));
    localVarQueryParams.addAll(apiClient.parameterToPair("ratingTo", ratingTo));
    localVarQueryParams.addAll(apiClient.parameterToPair("isoFrom", isoFrom));
    localVarQueryParams.addAll(apiClient.parameterToPair("isoTo", isoTo));
    localVarQueryParams.addAll(apiClient.parameterToPair("exposureTimeFrom", exposureTimeFrom));
    localVarQueryParams.addAll(apiClient.parameterToPair("exposureTimeTo", exposureTimeTo));
    localVarQueryParams.addAll(apiClient.parameterToPair("apertureFrom", apertureFrom));
    localVarQueryParams.addAll(apiClient.parameterToPair("apertureTo", apertureTo));
    localVarQueryParams.addAll(apiClient.parameterToPair("focalLengthFrom", focalLengthFrom));
    localVarQueryParams.addAll(apiClient.parameterToPair("focalLengthTo", focalLengthTo));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<ImagesInner>> localVarReturnType = new TypeReference<List<ImagesInner>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * 
   * 
   * @param imageId Id of image to return (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] getImage(Integer imageId) throws ApiException {
    return this.getImage(imageId, Collections.emptyMap());
  }


  /**
   * 
   * 
   * @param imageId Id of image to return (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] getImage(Integer imageId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'imageId' is set
    if (imageId == null) {
      throw new ApiException(400, "Missing the required parameter 'imageId' when calling getImage");
    }
    
    // create path and map variables
    String localVarPath = "/image/{imageId}"
      .replaceAll("\\{" + "imageId" + "\\}", apiClient.escapeString(imageId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "image/jpeg"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<byte[]> localVarReturnType = new TypeReference<byte[]>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * 
   * 
   * @param imageId Id identifing an Image (optional)
   * @return Image
   * @throws ApiException if fails to make API call
   */
  public Image getInformationAboutImage(Integer imageId) throws ApiException {
    return this.getInformationAboutImage(imageId, Collections.emptyMap());
  }


  /**
   * 
   * 
   * @param imageId Id identifing an Image (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return Image
   * @throws ApiException if fails to make API call
   */
  public Image getInformationAboutImage(Integer imageId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/image/getInformation";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("imageId", imageId));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Image> localVarReturnType = new TypeReference<Image>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * 
   * 
   * @param imageId Id of Image to scale (required)
   * @param width new width of scaled Image (required)
   * @param height new height of scaled Image (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] scalesImage(Integer imageId, Integer width, Integer height) throws ApiException {
    return this.scalesImage(imageId, width, height, Collections.emptyMap());
  }


  /**
   * 
   * 
   * @param imageId Id of Image to scale (required)
   * @param width new width of scaled Image (required)
   * @param height new height of scaled Image (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] scalesImage(Integer imageId, Integer width, Integer height, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'imageId' is set
    if (imageId == null) {
      throw new ApiException(400, "Missing the required parameter 'imageId' when calling scalesImage");
    }
    
    // verify the required parameter 'width' is set
    if (width == null) {
      throw new ApiException(400, "Missing the required parameter 'width' when calling scalesImage");
    }
    
    // verify the required parameter 'height' is set
    if (height == null) {
      throw new ApiException(400, "Missing the required parameter 'height' when calling scalesImage");
    }
    
    // create path and map variables
    String localVarPath = "/image/scale";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("imageId", imageId));
    localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
    localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "image/jpeg"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<byte[]> localVarReturnType = new TypeReference<byte[]>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

}
