/*
 * Digikam
 * RESTful Backend for Digikam
 *
 * The version of the OpenAPI document: 1.0
 * Contact: braun.h.michael@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.braun.digikam.client.api;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;
import org.braun.digikam.client.invoker.ApiClient;
import org.braun.digikam.client.invoker.ApiException;
import org.braun.digikam.client.model.Image;
import org.braun.digikam.client.model.ImagesInner;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

/**
 * API tests for DefaultApi
 */
public class ImageApiTest {

    private final ImageApi api = new ImageApi();

    /**
     * @throws ApiException
     *          if the Api call fails
     */
    boolean finished = true;
    @Test
    public void findImagesByImageAttributesTest() throws ApiException, JsonProcessingException {

        List<Integer> keywords = null;
        String creator = "Michael Braun";
        String makeModel = null;
        String lens = null;
        String orientation = "portrait";
        String dateFrom = "202212--------"; //new UncompleteDateTime().year(2022).month(12);
        String dateTo = "2023----------"; // new UncompleteDateTime().year(2023);
        Integer ratingFrom = 2;
        Integer ratingTo = 5;
        Integer isoFrom = null;
        Integer isoTo = null;
        Double exposureTimeFrom = null;
        Double exposureTimeTo = null;
        Double apertureFrom = null;
        Double apertureTo = null;
        Double focalLengthFrom = null;
        Double focalLengthTo = null;

        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        objectMapper.configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false);
        objectMapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        objectMapper.enable(SerializationFeature.WRITE_ENUMS_USING_TO_STRING);
        objectMapper.enable(DeserializationFeature.READ_ENUMS_USING_TO_STRING);
        objectMapper.registerModule(new JavaTimeModule());
        objectMapper.setDateFormat(ApiClient.buildDefaultDateFormat());

//        if (finished) return;        
        List<ImagesInner> response = api.findImagesByImageAttributes(keywords, creator, makeModel, lens, orientation, dateFrom, dateTo, ratingFrom, ratingTo, isoFrom, isoTo, exposureTimeFrom, exposureTimeTo, apertureFrom, apertureTo, focalLengthFrom, focalLengthTo);
        System.out.println("Number of Images found: " + response.size());
        for (ImagesInner im : response) {
            System.out.println(String.format("id=%s, date=%s", im.getImageId(), im.getCreationDate()));
        }
        // TODO: test validations
    }
    
    //@Test
    public void getInformationAboutImageTest() throws ApiException {
        Image image = api.getInformationAboutImage(112278);
        System.out.println(image);
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scalesImageTest() throws ApiException, IOException {
        Integer imageId = 112278;
        Integer width = 1080;
        Integer height = 1776;
        byte[] response = api.scalesImage(imageId, width, height);
        Assertions.assertTrue(response.length > 0, "Image can not be read from server");
        FileOutputStream fos = new FileOutputStream("/data/develop/" + imageId + ".jpg");
        fos.write(response);
        // TODO: test validations
    }
}
